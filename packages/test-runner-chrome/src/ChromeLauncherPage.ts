import { Page } from 'puppeteer-core';
import {
  TestRunnerCoreConfig,
  getBrowserPageNavigationError,
  TestResultError,
  CoverageMapData,
} from '@web/test-runner-core';
import { V8Coverage, v8ToIstanbul } from '@web/test-runner-coverage-v8';
import { SessionResult } from '@web/test-runner-core';

export class ChromeLauncherPage {
  private config: TestRunnerCoreConfig;
  private testFiles: string[];
  private product: string;
  public puppeteerPage: Page;
  private nativeInstrumentationEnabledOnPage = false;
  private testURL?: URL;
  private navigations: URL[] = [];

  constructor(
    config: TestRunnerCoreConfig,
    testFiles: string[],
    product: string,
    puppeteerPage: Page,
  ) {
    this.config = config;
    this.testFiles = testFiles;
    this.product = product;
    this.puppeteerPage = puppeteerPage;

    // track browser navigations
    puppeteerPage.on('request', e => {
      if (e.isNavigationRequest()) {
        this.navigations.push(new URL(e.url()));
      }
    });
  }

  async runSession(url: string, coverage: boolean) {
    this.testURL = new URL(url);
    this.navigations = [];

    if (
      coverage &&
      this.config.coverageConfig?.nativeInstrumentation !== false &&
      this.product === 'chromium'
    ) {
      if (this.nativeInstrumentationEnabledOnPage) {
        await this.puppeteerPage.coverage.stopJSCoverage();
      }
      this.nativeInstrumentationEnabledOnPage = true;
      await this.puppeteerPage.coverage.startJSCoverage();
    }

    await this.puppeteerPage.setViewport({ height: 600, width: 800 });
    await this.puppeteerPage.goto(url);
  }

  async stopSession(): Promise<SessionResult> {
    const errors: TestResultError[] = [];
    let testCoverage: CoverageMapData | undefined;

    // check if the page was navigated, resulting in broken tests
    const navigationError = getBrowserPageNavigationError(this.testURL!, this.navigations);
    if (navigationError) {
      errors.push(navigationError);
    } else {
      testCoverage = await this.collectTestCoverage(this.config, this.testFiles);
    }

    // navigate to an empty page to kill any running code on the page, stopping timers and
    // breaking a potential endless reload loop
    await this.puppeteerPage.goto('data:,');

    return { testCoverage, errors };
  }

  private async collectTestCoverage(config: TestRunnerCoreConfig, testFiles: string[]) {
    const coverageFromBrowser = await this.puppeteerPage.evaluate(
      () => (window as any).__coverage__,
    );

    if (coverageFromBrowser) {
      // coverage was generated by JS, return that
      return coverageFromBrowser;
    }

    if (config.coverageConfig?.nativeInstrumentation === false) {
      throw new Error(
        'Coverage is enabled with nativeInstrumentation disabled. ' +
          'Expected coverage provided in the browser as a global __coverage__ variable.' +
          'Use a plugin like babel-plugin-istanbul to generate the coverage, or enable native instrumentation.',
      );
    }

    if (!this.nativeInstrumentationEnabledOnPage) {
      return undefined;
    }

    // get native coverage from puppeteer
    // TODO: this is using a private puppeteer API to grab v8 code coverage, this can be removed
    // when https://github.com/puppeteer/puppeteer/issues/2136 is resolved
    const response = (await (this.puppeteerPage as any)._client.send(
      'Profiler.takePreciseCoverage',
    )) as {
      result: V8Coverage[];
    };
    // puppeteer already has the script sources available, remove this when above issue is resolved
    const scriptSources = (this.puppeteerPage as any)?.coverage?._jsCoverage?._scriptSources;

    const v8Coverage = response.result
      // remove puppeteer specific scripts
      .filter(r => r.url && r.url !== '__puppeteer_evaluation_script__')
      // attach source code
      .map(r => ({
        ...r,
        source: scriptSources.get(r.scriptId),
      }));

    await this.puppeteerPage.coverage?.stopJSCoverage();
    this.nativeInstrumentationEnabledOnPage = false;
    return v8ToIstanbul(config, testFiles, v8Coverage);
  }
}
